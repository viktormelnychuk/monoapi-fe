// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint1 "github.com/go-kit/kit/endpoint"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
	endpoint "github.com/viktormelnychuk/monoapi/monoapi/pkg/endpoint"
	http1 "github.com/viktormelnychuk/monoapi/monoapi/pkg/http"
	service "github.com/viktormelnychuk/monoapi/monoapi/pkg/service"
	"go.uber.org/zap"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger *zap.SugaredLogger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {

	options := map[string][]http.ServerOption{
		"EnableCard":         {http.ServerErrorEncoder(http1.ErrorEncoder)},
		"GetAllTransactions": {http.ServerErrorEncoder(http1.ErrorEncoder)},
		"GetCards":           {http.ServerErrorEncoder(http1.ErrorEncoder)},
		"GetTransaction":     {http.ServerErrorEncoder(http1.ErrorEncoder)},
		"Login":              {http.ServerErrorEncoder(http1.ErrorEncoder)},
		"SignUp":             {http.ServerErrorEncoder(http1.ErrorEncoder)},
	}
	return options
}
func addDefaultEndpointMiddleware(logger *zap.SugaredLogger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["Login"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(logger.Named("Login::")), endpoint.InstrumentingMiddleware(duration.With("method", "Login"))}
	mw["SignUp"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(logger.Named("SignUp::")), endpoint.InstrumentingMiddleware(duration.With("method", "SignUp"))}
	mw["GetAllTransactions"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(logger.Named("GetAllTransactions::")), endpoint.InstrumentingMiddleware(duration.With("method", "GetAllTransactions"))}
	mw["GetTransaction"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(logger.Named("GetTransaction::")), endpoint.InstrumentingMiddleware(duration.With("method", "GetTransaction"))}
	mw["GetCards"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(logger.Named("GetCards::")), endpoint.InstrumentingMiddleware(duration.With("method", "GetCards"))}
	mw["EnableCard"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(logger.Named("EnableCard::")), endpoint.InstrumentingMiddleware(duration.With("method", "EnableCard"))}
}
func addDefaultServiceMiddleware(logger *zap.SugaredLogger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"Login", "SignUp", "GetAllTransactions", "GetTransaction", "GetCards", "EnableCard"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
